#include "MCS.h"
#include "Arduino.h"
#include "LTimer.h"
#include "DHT.h"
#include <LWiFi.h>
#include <WiFiClient.h>
#define DHTPIN 2
#define DHTTYPE DHT11
#define _SSID "Mr.RUAN"
#define _KEY  "Iamfrom871223"
DHT dht(DHTPIN, DHTTYPE);
LTimer timer0(LTIMER_1);
// Assign device id / key of your test device
MCSDevice mcs("D9GGWTkU", "IJw45Ix1kYFS0tbG");
MCSDisplayFloat Data1("Data1");
MCSDisplayFloat Data2("Data2");
volatile  float f=0;
volatile  float h=0;
volatile  float t=0;
int flag=0;
void _callback0(void *usr_data)
{ 
  flag = 1;
}

void setup() {
  // setup Serial output at 9600
  Serial.begin(9600);
  // setup Wifi connection
  while(WL_CONNECTED != WiFi.status())
  {
    Serial.print("WiFi.begin(");
    Serial.print(_SSID);
    Serial.print(",");
    Serial.print(_KEY);
    Serial.println(")...");
    WiFi.begin(_SSID, _KEY);
  }
  Serial.println("WiFi connected !!");

  // setup MCS connection
  mcs.addChannel(Data1);
  mcs.addChannel(Data2);
  while(!mcs.connected())
  {
    Serial.println("MCS.connect()...");
    mcs.connect();
  }
  Serial.println("MCS connected !!");
  timer0.begin();
  dht.begin();
  timer0.start(1000, LTIMER_REPEAT_MODE, _callback0, NULL);
  // read LED value from MCS server
}
void loop() {
  // call process() to allow background processing, add timeout to avoid high cpu usage
  h = dht.readHumidity();
  t = dht.readTemperature();
  Serial.print("process(");
  Serial.print(millis());
  Serial.println(")");
  mcs.process(100);
  if(flag){
  Data1.set(h);
  Data2.set(t);
  flag = 0;
  }
  // updated flag will be cleared in process(), user must check it after process() call.
  
  
  // check if need to re-connect
  while(!mcs.connected())
  {
    Serial.println("re-connect to MCS...");
    mcs.connect();
    if(mcs.connected())
      Serial.println("MCS connected !!");
  }
}